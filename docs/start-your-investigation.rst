========================
Start your investigation
========================

Detective.io is build around its ability to generate automaticly an API and a
front-end by parsing a given ontology. To write an ontology we use a very
strict syntax in JSON. This document aims to detail how to write this JSON.

Models
======

An ontolgy is composed of one or several models. Each model describes a family
of elements in your investigation. It can be a Person, an Organization, a
Country, etc. Every model has a list of *fields*, a *name* and optional *rules*
that allow a finer description of the model's behavior.

A minimal investigation with only one model looks something like this:

.. code-block:: json

    [
        {
            "name": "Person",
            "fields": [
                { "name": "name", "type": "string" },
                { "name": "birthday", "type": "date" }
            ]
        }
    ]

At the first level of our JSON we defined an array of model. This way we allow
the user to define the order of each model into the front-end.

Model attributes
----------------

This table gives a description of every model's attribute available.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - description
      - string
      - Alias for *help_text*

    * - fields
      - array
      - The fields that compose your model. See Fields section.

    * - help_text
      - string
      - The description of you model to help final user to understand what you
        are describing.

    * - name
      - string
      - The name of you model. This will be use to generate a slug to access the
        data related to your model. This will be converted to a normalized
        string, removing special characters and spaces.

    * - verbose_name
      - string
      - A human-readable name your model. It is particulary
        accurate for name containing special characters or spaces.

    * - verbose_name_plural
      - string
      - The same as *verbose_name* but for plural elements. When not specified,
        this attribute is automaticly generated by adding a "s" to the end of
        the *verbose_name*.

Model rules
-----------

Model rules are additional option that extend the default behavior of a model.
Unlike the model fields, those rules aren't build-in properties of the object
graph mapper.

.. code-block:: json

    [
        {
            "name": "Person",
            "fields": [],
            "rules": [
                {"is_editable": true},
                {"is_visible": false}
            ]
        }
    ]


This table gives a description of every model's rules available.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - is_editable
      - boolean
      - Set to "false" if the user must not be able to edit this model's
        elements.

    * - is_searchable
      - boolean
      - Set to "false" if the user must not be able to search this element by
        name. **If the model doesn't have a "name" field, this will be set to
        false automaticly**.

    * - is_visible
      - boolean
      - Set to "false" if this model must not be visible in the contribute form.

