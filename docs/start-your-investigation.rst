========================
Start your investigation
========================

Detective.io generates an API and a front-end by parsing a so called ontology defining the data structure of an instance. For these ontologies we use a
strict syntax in JSON. This document details how to write this JSON.

.. _models:

Models
======

An ontolgy is composed of one or several models. Each model describes a family
of elements that constitute the main data entities of your instance. Your model could be a Person, an Organization, a
Country, a Case, a Document, a Law or similar. Every model has a *name*, a list of *fields*, and optional *rules*
that allow for a finer description of the respective model's behavior.

A minimal investigation with only one model would look something like this:

.. code-block:: json

    [
        {
            "name": "Person",
            "fields": [
                { "name": "name", "type": "string" },
                { "name": "birthday", "type": "date" }
            ]
        }
    ]

At the first level of our JSON we define an array of models. This array also defines the order of each model in the front-end.


.. _model-attributes:

Model attributes
----------------

This table provides an overview over model attributes available.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - description
      - string
      - Alias for *help_text*

    * - fields
      - array
      - The fields that constitute your model in the front end. See :ref:`fields` section.

    * - help_text
      - string
      - A short description of your model to help the end user understand what the model is about.

    * - name
      - string
      - The name of your model. This will be used to generate a slug to access the
        data related to your model. It will be converted to a normalized
        string, removing special characters and spaces.

    * - verbose_name
      - string
      - A human-readable name for your model. It's useful for names containing special characters or spaces.

    * - verbose_name_plural
      - string
      - The same as *verbose_name* but for plural elements. When not specified,
        this attribute is automatically generated by adding an "s" to the end of
        the *verbose_name*.


.. _model-rules:

Model rules
-----------

Model rules are additional options that extend the default behavior of a model.
Unlike the model fields, those rules aren't built-in properties of the object
graph mapper.

.. code-block:: json

    [
        {
            "name": "Person",
            "fields": [],
            "rules": [
                {"is_editable": true},
                {"is_visible": false}
            ]
        }
    ]


This table gives a description of available model rules.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - is_editable
      - boolean
      - Set to "false" if the user must not be able to edit this model's
        elements.

    * - is_searchable
      - boolean
      - Set to "false" if the user must not be able to search this element by
        name. **If the model doesn't have a *name* field, this will be set to
        false automaticly**.

    * - is_visible
      - boolean
      - Set to "false" if this model must not be visible in the contribute form.

.. _model-fields:

Model fields
------------

The model fields attribute is an array of fields. The order of elements within this array also defines the order of fields in the front-end.

.. code-block:: json

    [
        {
            "name": "Person",
            "help_text": "A Person represents a physical person involved in an Organization, a Project or a Commentary.",
            "fields": [
                {
                    "name": "activity_in_organization",
                    "related_model": "Organization",
                    "type": "Relationship",
                    "verbose_name": "Activity in Organizations"
                },
                {
                    "name": "based_in",
                    "related_model": "Country",
                    "type": "Relationship",
                    "verbose_name": "Based in"
                },
                {
                    "name": "educated_in",
                    "related_model": "Country",
                    "type": "Relationship",
                    "verbose_name": "Educated in"
                },
                {
                    "help_text": "The URL (starting with http://) where the image is hosted.",
                    "name": "image",
                    "type": "url",
                    "verbose_name": "Image URL"
                },
                {
                    "name": "name",
                    "type": "string",
                    "verbose_name": "name"
                },
                {
                    "help_text": "Current position within the Organization (e.g. CEO, CFO, spokesperson etc.)",
                    "model": "Person",
                    "name": "position",
                    "type": "string",
                    "verbose_name": "Position"
                },
                {
                    "help_text": "Has the entity been active in a specific Organization previsously?",
                    "name": "previous_activity_in_organization",
                    "type": "Relationship",
                    "verbose_name": "Previous activity in"
                },
                {
                    "help_text": "The Twitter name of the entity (without the @)",
                    "name": "twitter_handle",
                    "type": "string",
                    "verbose_name": "Twitter handle"
                },
                {
                    "name": "website_url",
                    "type": "string",
                    "verbose_name": "Website URL"
                }
            ]
        }
    ]

.. _fields:

Fields
======

Each field is described using an object containing at least a *name* and a *type*.

.. _field-types:

Field types
-----------

.. list-table::
    :widths: 20 80
    :header-rows: 1

    * - Name
      - Description

    * - boolean
      - Two possible values: true or false. The default value is always false.

    * - datetime
      - Date value. More precise time values are not supported yet.

    * - float
      - Number allowing for decimal values. This type is not natively supported by
        our Object Graph Mapper yet. It is recorded as a string and sanitized by the API.

    * - integer
      - Integer value.

    * - relationship
      - A relationship establishes a connection between two entities. This type
        has special attributes. See  :ref:`relationship-attributes`

    * - string
      - A sequence of characters.

    * - url
      - A URL string


.. _field-rules:

Field attributes
----------------

A field can hold the following attributes.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - default
      - mixed
      - Default value when no value is specified

    * - help_text
      - string
      - The description of your field to help end users understand what you
        are describing with this field.

    * - indexed
      - boolean
      - If true, the server will create an index for this field. It
        may help improve performance. Default to true for name field.

    * - name
      - string
      - The name of your field. This will be converted to a normalized
        string, removing special characters and spaces. **This attribute is
        mandatory**.

    * - type
      - string
      - The type of your field. See :ref:`field-types`. **This attribute is
        mandatory**.

    * - verbose_name
      - string
      - A human-readable name for your field. It is useful for names containing special characters or spaces.

.. _special-properties:

Special properties for specific name-type value combinations
------------------------------------------------------------

There is a number of special properties that will be applied to fields if they are given a specific combination of "name"-value and "type"-value. This is specified as follows:


.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name-Value
      - Type-Value
      - Behaviour

    * - image
      - url
      - If a field's name is image and its type 'url' the photo at the given url will be shown as an illustration of the respective entities in the front-end.

    * - comment
      - string
      - If a field's name is 'comment' and its type 'string' a text box (5 lines) will be created instead of a single-line text field.

    * - latitude
      - string
      - If a field's name is 'latitude' and its type 'string', a map with this location will be shown in the front-end of the respective entity. Only use in combination with 'name'-value 'longitude'.

    * - longitude
      - string
      - If a field's name is 'longitude' and its type 'string', a map with this location will be shown in the front-end of the respective entity. Use in combination with 'name'-value 'latitude'.

    * - address
      - string
      - If a field's name is 'address' and its type 'string', detective connects to a geolocalization API and shows a map with the geolocalized location in the front-end of the respective entity. This functionality is only enabled when 'longitude' and 'latitude' are *not* filled out.


.. _relationship-attributes:

Relationship field attributes
-----------------------------

When the type of your field is "relationship", you have to specify a number of
special attributes.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - related_model
      - string
      - The name of the model to which the model is related. For relationship
        fields, **this attribute is mandatory**.

    * - related_name
      - string
      - The name to use for the relation from the related model back to this
        model. When specified, this will automatically create a reverse field in
        the *related_model*'s front.

    * - fields
      - array
      - Use, if you want to add special attributes to this relationship. The
        given array will contain a list of fields following the
        same specifications as any model field. However, relationship fields are
        not allowed here.


.. _field-rules:

Field rules
-----------

Just like to any model, you can add rules to your fields.

.. code-block:: json

    [
        {
            "name": "Person",
            "fields": [
                {
                    "name": "name",
                    "type": "string",
                    "rules": [
                        {}
                    ]
                }
            ]
        }
    ]

This table provides a description of field rules.

.. list-table::
    :widths: 20 15 65
    :header-rows: 1

    * - Name
      - Type
      - Description

    * - has_properties
      - boolean
      - This rule specifies if a relationship has an intermediary model to
        describe it. This model is specified within the *through* attribute.

    * - is_editable
      - boolean
      - Set to "false" if the user must not be able to edit this field.

    * - is_rich
      - boolean
      - Set to "true" to unable rich text format for string field.

    * - is_searchable
      - boolean
      - This rule specifies if a relationship is bound to a searchable model or
        if every relationship is done with a brand new entity.

    * - is_visible
      - boolean
      - Set to "false" if this field must not be visible by default in the
        contribute form.

    * - through
      - string
      - This rule specifies the model used to describe a relationship.
